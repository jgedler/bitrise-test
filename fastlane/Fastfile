default_platform(:ios)

BUILD_DIR = "build"
LOG_DIR = "./build/logs"
REPORTS_DIR = "./build/reports"
CONFIG_TEST_DEVICES = ['iPhone 11']
GITHUB_API_TOKEN = ENV['GITHUB_API_TOKEN']

platform :ios do
	desc "Tests: Performs tests"
    private_lane :do_tests do |options|
      run_tests(
        scheme: options[:scheme],
        # devices: CONFIG_TEST_DEVICES,
        skip_detect_devices: false,
        reset_simulator: true,
        code_coverage: true,
        output_directory: "#{REPORTS_DIR}/tests",
        output_types: "html,junit", # html, junit
        derived_data_path: BUILD_DIR,
        result_bundle: true,
        output_files: "UnitTest.html, UnitTest.xml",
        skip_build: true,
        number_of_retries: 2
      )
    end

    desc "Code coverage: Gets code coverage"
    private_lane :do_coverage do |options|
      sh "rm -rf ../build/reports/coverage"

      xcov(
        scheme: options[:scheme],
        output_directory: "#{REPORTS_DIR}/coverage",
        minimum_coverage_percentage: 60.0,
        html_report: true,
        json_report: true,
        markdown_report: true,
        disable_coveralls: true
      )

      # Leer el archivo markdown generado
      markdown_content = File.read(".#{REPORTS_DIR}/coverage/report.md")

      # Asegúrate de que el contenido no sea demasiado grande para el comentario
      # GitHub tiene un límite de 65536 caracteres por comentario
      markdown_content = markdown_content[0..65535] if markdown_content.length > 65536

      comment_on_pull_request(
        github_token: GITHUB_API_TOKEN,
        repo: 'jgedler/bitrise-test',
        pr_number: ENV['BITRISE_PULL_REQUEST'],
        comment: markdown_content
      )
    end

  	desc "Testing: Build and Runs the Unit tests of the app"
    lane :tests do |options|
      scheme = "bitrise-sample"
      do_tests(scheme: scheme)
      do_coverage(scheme: scheme)
    end  
end
